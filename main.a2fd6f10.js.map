{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelectorAll","forEach","tableTH","addEventListener","getSort","event","events","target","order","dataset","index","parentNode","cells","indexOf","collator","Intl","Collator","numeric","comparator","column","valueOrder","a","b","compare","children","innerHTML","closest","tBodies","tBody","append","rows","sort","cell","classList","toggle"],"mappings":";AAAA,aAOA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EALA,IAAMA,EAAQC,SAASC,iBAAiB,SAExCF,EAAMG,QAAQ,SAAAC,GACZA,OAAAA,EAAQC,iBAAiB,QAAS,WAAMC,OAAAA,EAAQC,WAElD,IAAMD,EAAU,SAACE,GACTC,IADoB,EACpBA,EAASD,EAAOC,OAChBC,EAASD,EAAOE,QAAQD,QAAUD,EAAOE,QAAQD,QAAU,GAC3DE,EAAQ,EAAIH,EAAOI,WAAWC,OAAOC,QAAQN,GAC7CO,EAAW,IAAIC,KAAKC,SAAS,CAAC,KAAM,MAAO,CAAEC,SAAS,IACtDC,EAAa,SAACC,EAAQC,GAC1B,OAAA,SAACC,EAAGC,GAAMF,OAAAA,EAAaN,EAASS,QAC9BF,EAAEG,SAASL,GAAQM,UACnBH,EAAEE,SAASL,GAAQM,aAGHlB,EAAAA,EAAAA,EAAOmB,QAAQ,SAASC,SAXlB,IAW2B,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAA1CC,IAAAA,EAA0C,EAAA,MACnDA,EAAMC,OAAND,MAAAA,EAAgB,EAAA,EAAIA,EAAME,MAAMC,KAAKb,EAAWR,EAAOF,OAZ/B,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAePD,IAfO,EAePA,EAAAA,EAAAA,EAAOI,WAAWC,OAfX,IAekB,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAjCoB,IAAAA,EAAiC,EAAA,MAC1CA,EAAKC,UAAUC,OAAO,SAAUF,IAASzB,IAhBjB,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA","file":"main.a2fd6f10.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst table = document.querySelectorAll('table');\n\ntable.forEach(tableTH =>\n  tableTH.addEventListener('click', () => getSort(event)));\n\nconst getSort = (events) => {\n  const target = events.target;\n  const order = (target.dataset.order = -(target.dataset.order || -1));\n  const index = [...target.parentNode.cells].indexOf(target);\n  const collator = new Intl.Collator(['en', 'ru'], { numeric: true });\n  const comparator = (column, valueOrder) =>\n    (a, b) => valueOrder * collator.compare(\n      a.children[column].innerHTML,\n      b.children[column].innerHTML\n    );\n\n  for (const tBody of target.closest('table').tBodies) {\n    tBody.append(...[...tBody.rows].sort(comparator(index, order)));\n  }\n\n  for (const cell of target.parentNode.cells) {\n    cell.classList.toggle('sorted', cell === target);\n  };\n};\n"]}